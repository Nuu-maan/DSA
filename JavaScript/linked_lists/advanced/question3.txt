Copy List with Random Pointer and Metadata

Problem Statement:
A linked list of length n is given such that each node contains an additional random pointer, which could point to any node in the list, or null.
Additionally, each node contains metadata that should be deep copied.

Construct a deep copy of the list. The deep copy should consist of exactly n brand new nodes, where each new node has its value set to the value of its corresponding original node. Both the next and random pointer of the new nodes should point to new nodes in the copied list such that the pointers in the original list and copied list represent the same list state. None of the pointers in the new list should point to nodes in the original list.

The metadata can be any JavaScript object and should be deep copied (not just reference copied).

Example 1:
Input: head = [[7,null,{}],[13,0,{"count":1}],[11,4,{"data":[1,2,3]}],[10,2,{"name":"test"}],[1,0,{"nested":{"value":42}}]]
Output: [[7,null,{}],[13,0,{"count":1}],[11,4,{"data":[1,2,3]}],[10,2,{"name":"test"}],[1,0,{"nested":{"value":42}}]]

Example 2:
Input: head = [[1,1,{"a":1}],[2,1,{"b":2}]]
Output: [[1,1,{"a":1}],[2,1,{"b":2}]]

Constraints:
- 0 <= n <= 1000
- -10^4 <= Node.val <= 10^4
- Node.random is null or is pointing to some node in the linked list.
- Metadata can be any valid JavaScript object (including nested objects, arrays, etc.)
- Metadata should be deep copied, not reference copied
