Reverse Nodes in k-Group with Custom Reversal Logic

Problem Statement:
Given the head of a linked list, reverse the nodes of the list k at a time, but with a custom reversal logic function.

The reversal logic function takes an array of k nodes and returns a new array of nodes in the desired order.

For example:
- Normal reversal: [1,2,3,4,5], k=3 → [3,2,1,4,5]
- Reverse alternate: [1,2,3,4,5], k=3 → [1,2,3,5,4] (reverse first group, keep second as is)
- Palindrome ordering: [1,2,3,4,5], k=3 → [2,1,3,4,5] (reorder to form palindrome within group)

If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.

Example 1:
Input: head = [1,2,3,4,5], k = 3, reversalLogic = (nodes) => nodes.reverse()
Output: [3,2,1,4,5]

Example 2:
Input: head = [1,2,3,4,5,6,7,8], k = 4, reversalLogic = (nodes) => [nodes[1], nodes[0], nodes[2], nodes[3]]
Output: [2,1,3,4,6,5,7,8]

Constraints:
- The number of nodes in the list is n.
- 1 <= k <= n <= 5000
- 0 <= Node.val <= 1000
- The reversalLogic function will always return an array of the same length as input
- Values in nodes can be of any type
