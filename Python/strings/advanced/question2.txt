Palindrome Pairs

Problem Description:
Given a list of unique words, return all the pairs of the distinct indices (i, j) in the given list, so that the concatenation of the two words words[i] + words[j] is a palindrome.

Note:
1. The order of pairs matters (i, j) is different from (j, i)
2. The words are unique (no duplicates in the list)
3. A word can be an empty string
4. You may return the pairs in any order

Example 1:
Input: words = ["abcd","dcba","lls","s","sssll"]
Output: [[0,1],[1,0],[3,2],[2,4]]
Explanation:
The palindromes are:
- "abcddcba" from words[0] + words[1]
- "dcbaabcd" from words[1] + words[0]
- "slls" from words[3] + words[2]
- "llssssll" from words[2] + words[4]

Example 2:
Input: words = ["bat","tab","cat"]
Output: [[0,1],[1,0]]
Explanation:
The palindromes are:
- "battab" from words[0] + words[1]
- "tabbat" from words[1] + words[0]

Example 3:
Input: words = ["a",""]
Output: [[0,1],[1,0]]
Explanation:
The palindromes are:
- "a" from words[0] + words[1]
- "a" from words[1] + words[0]

Constraints:
- 1 <= words.length <= 5000
- 0 <= words[i].length <= 300
- words[i] consists of lowercase English letters
- All words are unique

Source: LeetCode Hard
Link: https://leetcode.com/problems/palindrome-pairs/ 