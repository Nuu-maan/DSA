Stream of Characters

Problem Description:
Design an algorithm that accepts a stream of characters and checks if a suffix of these characters is a string of a given array of strings words.

Implement the StreamChecker class:
- StreamChecker(words): Initializes the object with the strings array words.
- query(letter): Accepts a new character from the stream and returns true if any one of the strings in words is a suffix of the stream formed so far. Return false otherwise.

Note:
1. The stream forms a string by appending each character
2. We need to check if any word from the dictionary is a suffix of the stream
3. The implementation should be efficient for multiple queries
4. Memory usage should be optimized for long streams

Example:
StreamChecker streamChecker = new StreamChecker(["cd","f","kl"]);
streamChecker.query('a'); // return False
streamChecker.query('b'); // return False
streamChecker.query('c'); // return False
streamChecker.query('d'); // return True, because 'cd' is a suffix of the stream
streamChecker.query('e'); // return False
streamChecker.query('f'); // return True, because 'f' is a suffix of the stream
streamChecker.query('g'); // return False
streamChecker.query('h'); // return False
streamChecker.query('i'); // return False
streamChecker.query('j'); // return False
streamChecker.query('k'); // return False
streamChecker.query('l'); // return True, because 'kl' is a suffix of the stream

Constraints:
- 1 <= words.length <= 2000
- 1 <= words[i].length <= 2000
- words[i] consists of lowercase English letters
- letter is a lowercase English letter
- At most 4 * 10^4 calls will be made to query

Follow up: Could you solve this problem with memory usage O(sum(words[i].length))?

Source: LeetCode Hard
Link: https://leetcode.com/problems/stream-of-characters/ 